package com.practice.nisum.restassured.authentication.scehems8;

import io.restassured.RestAssured;
import io.restassured.authentication.FormAuthConfig;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.session.SessionFilter;
import io.restassured.response.Response;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class FormAuthentication {
    //This is used to get the session id
    SessionFilter sessionFilter = new SessionFilter();
    @BeforeClass
    public void beforeClass(){
        RequestSpecBuilder requestSpecBuilder = new RequestSpecBuilder();
        //The below line is used when https is not supported
        requestSpecBuilder.setRelaxedHTTPSValidation();
        requestSpecBuilder.setBaseUri("https://localhost:8443/");
        RestAssured.requestSpecification = requestSpecBuilder.build();

    }

    //spring boot application (RomanianCodeExample) used for csrf token
/*    Csrf token is generated by backend at the start of session it is used to validate the the same token
    is being used by the user in same session*/

    @Test
    public void formAuthenticationUsingCSRF(){
        Response response=given()
                //This will check the the with action fields defined on Html
                //This will first get the form and then pass the credentials and the basis of action and placeholders and mentioned below
                .auth().form("dan", "dan123", new FormAuthConfig("/signin", "txtUsername",
                        "txtPassword").withAutoDetectionOfCsrf()) //withAutoDetectionOfCsrf() will fetch csrf automatically from response
                //this is used to get the session id
                .filter(sessionFilter)
                .log().all()
                .when()
                .get("login")
                .then()
                .log().all()
                .assertThat().statusCode(200).extract().response();

        System.out.println("**********  "+sessionFilter.getSessionId());


        //Calling the next api to validate that user is logged in and authenticated
        given()
                .sessionId(sessionFilter.getSessionId())
                .log().all()
                .when()
                .get("profile/index")
                .then()
                .log().all()
                .assertThat().statusCode(200).body("html.body.div.p", equalTo("This is User Profile\\Index. Only authenticated people can see this"));
    }
}
